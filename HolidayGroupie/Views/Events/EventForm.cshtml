@model HolidayGroupie.Models.Event
@{
    ViewBag.Title = "EventForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Create Event</h2>
@using (Html.BeginForm("Save", "Events"))
{
    //object returned will be disposed and render the
    //closing html tag
    //special markup for modern and responsive forms
    //wrap each input field with div form-group
    <div class="form-group">
        @Html.LabelFor(e => e.Name)
        @Html.TextBoxFor(e => e.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(e => e.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(e => e.Description)
        @Html.TextAreaFor(e => e.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(e => e.Description)
    </div>
    <div class="form-group">
        @Html.LabelFor(e => e.Date)
        <div style="position: relative">
            @Html.EditorFor(e => e.Date, new { @class = "form-control" } )
            @Html.ValidationMessageFor(e => e.Date)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(e => e.Location)
        
        <div id="map"></div>
        @Html.TextAreaFor(e => e.Location, new { @class = "controls" })
        @Html.ValidationMessageFor(e => e.Location)
        
        <div id="map"></div>
        <script>
            // This example adds a search box to a map, using the Google Place Autocomplete
            // feature. People can enter geographical searches. The search box will return a
            // pick list containing a mix of places and predicted search terms.

            // This example requires the Places library. Include the libraries=places
            // parameter when you first load the API. For example:
            // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

            function initAutocomplete() {
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: { lat: -33.8688, lng: 151.2195 },
                    zoom: 13,
                    mapTypeId: 'roadmap'
                });

                // Create the search box and link it to the UI element.
                var input = document.getElementById('Location');
                var searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                // Bias the SearchBox results towards current map's viewport.
                map.addListener('bounds_changed', function () {
                    searchBox.setBounds(map.getBounds());
                });

                var markers = [];
                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener('places_changed', function () {
                    var places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function (place) {
                        if (!place.geometry) {
                            console.log("Returned place contains no geometry");
                            return;
                        }
                        var icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25)
                        };

                        // Create a marker for each place.
                        markers.push(new google.maps.Marker({
                            map: map,
                            icon: icon,
                            title: place.name,
                            position: place.geometry.location
                        }));

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });
            }

        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDnkN1brLK8B3EzToGV7axWtsgYMhqkMSA
&callback=initAutocomplete&libraries=places"
                async defer></script>
    </div>
    @Html.HiddenFor(e => e.Id)
    
    <input type="submit" class="btn btn-primary" value="Save">
}

    <script type="text/javascript">
        $(document).ready(function () {
            $('#Date').datetimepicker({
                format: "YYYY/MM/DD"

            }).on('dp.change', function (e) {
                $(this).data("DateTimePicker").hide();
            });
        });
    </script>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}
